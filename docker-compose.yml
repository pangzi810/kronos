version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: devhour-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: devhour_db
      MYSQL_USER: devhour_user
      MYSQL_PASSWORD: devhour_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - devhour-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: devhour-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - devhour-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: devhour-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_HOST
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - devhour-network

  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: devhour-backend
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/devhour_db?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
  #     SPRING_DATASOURCE_USERNAME: devhour_user
  #     SPRING_DATASOURCE_PASSWORD: devhour_password
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     JWT_SECRET: your-production-jwt-secret-key-here
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_started
  #   networks:
  #     - devhour-network

  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: devhour-frontend
  #   ports:
  #     - "3000:80"
  #   depends_on:
  #     - backend
  #   networks:
  #     - devhour-network

volumes:
  mysql_data:

networks:
  devhour-network:
    driver: bridge